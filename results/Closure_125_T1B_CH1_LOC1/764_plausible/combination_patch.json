{
    "TypeCheck": {
        "0": {
            "action_judgements": null,
            "action_score": 0.6666666666666666,
            "buggy_code": "private void visitNew ( NodeTraversal t , Node n ) { Node constructor = n . getFirstChild ( ) ; JSType type = getJSType ( constructor ) . restrictByNotNullOrUndefined ( ) ; if ( type . isConstructor ( ) || type . isEmptyType ( ) || type . isUnknownType ( ) ) { FunctionType fnType = type . toMaybeFunctionType ( ) ;  if ( fnType != null ) {  visitParameterList ( t , n , fnType ) ; ensureTyped ( t , n , fnType . getInstanceType ( ) ) ; } else { ensureTyped ( t , n ) ; } } else { report ( t , n , NOT_A_CONSTRUCTOR ) ; ensureTyped ( t , n ) ; } }",
            "buggy_dir": "",
            "criteria_token_length": 166,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#void",
                "private#void#visit",
                "void#visit#new",
                "visit#new#(",
                "new#(#node",
                "(#node#traversal",
                "node#traversal#t",
                "traversal#t#,",
                "t#,#Node",
                ",#Node#n",
                "Node#n#)",
                "n#)#{",
                ")#{#Node",
                "{#Node#constructor",
                "Node#constructor#=",
                "constructor#=#n",
                "=#n#.",
                "n#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#j",
                ";#j#s",
                "j#s#type",
                "s#type#type",
                "type#type#=",
                "type#=#j",
                "=#j#s",
                "j#s#type",
                "s#type#(",
                "type#(#constructor",
                "(#constructor#)",
                "constructor#)#.",
                ")#.#by",
                ".#by#not",
                "by#not#null",
                "not#null#or",
                "null#or#undefined",
                "or#undefined#(",
                "undefined#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#type",
                "(#type#.",
                "type#.#is",
                ".#is#constructor",
                "is#constructor#(",
                "constructor#(#)",
                "(#)#||",
                ")#||#type",
                "||#type#.",
                "type#.#empty",
                ".#empty#type",
                "empty#type#(",
                "type#(#)",
                "(#)#||",
                ")#||#type",
                "||#type#.",
                "type#.#unknown",
                ".#unknown#type",
                "unknown#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#function",
                "{#function#type",
                "function#type#fn",
                "type#fn#type",
                "fn#type#=",
                "type#=#type",
                "=#type#.",
                "type#.#maybe",
                ".#maybe#function",
                "maybe#function#type",
                "function#type#(",
                "type#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#fn",
                "(#fn#type",
                "fn#type#!=",
                "type#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#parameter",
                "{#parameter#list",
                "parameter#list#(",
                "list#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#fn",
                ",#fn#type",
                "fn#type#)",
                "type#)#;",
                ")#;#ensure",
                ";#ensure#typed",
                "ensure#typed#(",
                "typed#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#fn",
                ",#fn#type",
                "fn#type#.",
                "type#.#instance",
                ".#instance#type",
                "instance#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#ensure",
                "{#ensure#typed",
                "ensure#typed#(",
                "typed#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#)",
                "n#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#else",
                "}#else#{",
                "else#{#report",
                "{#report#(",
                "report#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#n",
                ",#n#o",
                "n#o#t",
                "o#t#A",
                "t#A#c",
                "A#c#o",
                "c#o#n",
                "o#n#s",
                "n#s#t",
                "s#t#r",
                "t#r#u",
                "r#u#c",
                "u#c#t",
                "c#t#o",
                "t#o#r",
                "o#r#)",
                "r#)#;",
                ")#;#ensure",
                ";#ensure#typed",
                "ensure#typed#(",
                "typed#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#)",
                "n#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ],
            "diffs": {
                "10": {
                    "action": "CHANGE",
                    "buggy_end_line": 11,
                    "buggy_size": 2,
                    "buggy_start_line": 10,
                    "fixed_end_line": 10,
                    "fixed_size": 1,
                    "fixed_start_line": 10
                },
                "7": {
                    "action": "CHANGE",
                    "buggy_end_line": 7,
                    "buggy_size": 1,
                    "buggy_start_line": 7,
                    "fixed_end_line": 7,
                    "fixed_size": 1,
                    "fixed_start_line": 7
                }
            },
            "end_line": 1671,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Closure_125_src_com_google_javascript_jscomp_TypeCheck",
            "file_name": "TypeCheck",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_125",
            "module_name": "Closure",
            "module_num": "125",
            "multi_chunk_key": "Closure_125_src_com_google_javascript_jscomp_TypeCheck_method1_visitNew_NodeTraversal_Node",
            "ngram_score": 0.7228915662650602,
            "patch": "private void visitNew ( NodeTraversal t , Node n ) { Node constructor = n . getFirstChild ( ) ; JSType type = getJSType ( constructor ) . restrictByNotNullOrUndefined ( ) ; if ( type . isConstructor ( ) || type . isEmptyType ( ) || type . isUnknownType ( ) ) { FunctionType fnType = type . toMaybeFunctionType ( ) ; try { visitParameterList ( t , n , fnType ) ; ensureTyped ( t , n , fnType . getInstanceType ( ) ) ; } catch ( Exception e ) { } } else { report ( t , n , NOT_A_CONSTRUCTOR ) ; ensureTyped ( t , n ) ; } }",
            "patch_index": 93,
            "per_ins": 0,
            "per_other": 3,
            "score_total": 0.695,
            "set_index": null,
            "start_line": 1656,
            "tf_token_length": 156,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#void",
                "private#void#visit",
                "void#visit#new",
                "visit#new#(",
                "new#(#node",
                "(#node#traversal",
                "node#traversal#t",
                "traversal#t#,",
                "t#,#Node",
                ",#Node#n",
                "Node#n#)",
                "n#)#{",
                ")#{#Node",
                "{#Node#constructor",
                "Node#constructor#=",
                "constructor#=#n",
                "=#n#.",
                "n#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#j",
                ";#j#s",
                "j#s#type",
                "s#type#type",
                "type#type#=",
                "type#=#j",
                "=#j#s",
                "j#s#type",
                "s#type#(",
                "type#(#constructor",
                "(#constructor#)",
                "constructor#)#.",
                ")#.#by",
                ".#by#not",
                "by#not#null",
                "not#null#or",
                "null#or#undefined",
                "or#undefined#(",
                "undefined#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#type",
                "(#type#.",
                "type#.#is",
                ".#is#constructor",
                "is#constructor#(",
                "constructor#(#)",
                "(#)#||",
                ")#||#type",
                "||#type#.",
                "type#.#empty",
                ".#empty#type",
                "empty#type#(",
                "type#(#)",
                "(#)#||",
                ")#||#type",
                "||#type#.",
                "type#.#unknown",
                ".#unknown#type",
                "unknown#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#function",
                "{#function#type",
                "function#type#fn",
                "type#fn#type",
                "fn#type#=",
                "type#=#type",
                "=#type#.",
                "type#.#maybe",
                ".#maybe#function",
                "maybe#function#type",
                "function#type#(",
                "type#(#)",
                "(#)#;",
                ")#;#try",
                ";#try#{",
                "try#{#parameter",
                "{#parameter#list",
                "parameter#list#(",
                "list#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#fn",
                ",#fn#type",
                "fn#type#)",
                "type#)#;",
                ")#;#ensure",
                ";#ensure#typed",
                "ensure#typed#(",
                "typed#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#fn",
                ",#fn#type",
                "fn#type#.",
                "type#.#instance",
                ".#instance#type",
                "instance#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#catch",
                "}#catch#(",
                "catch#(#Exception",
                "(#Exception#e",
                "Exception#e#)",
                "e#)#{",
                ")#{#}",
                "{#}#}",
                "}#}#else",
                "}#else#{",
                "else#{#report",
                "{#report#(",
                "report#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#n",
                ",#n#o",
                "n#o#t",
                "o#t#A",
                "t#A#c",
                "A#c#o",
                "c#o#n",
                "o#n#s",
                "n#s#t",
                "s#t#r",
                "t#r#u",
                "r#u#c",
                "u#c#t",
                "c#t#o",
                "t#o#r",
                "o#r#)",
                "r#)#;",
                ")#;#ensure",
                ";#ensure#typed",
                "ensure#typed#(",
                "typed#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#)",
                "n#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ]
        }
    }
}