--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Closure_19/702/ChainableReverseAbstractInterpreter_Origin.java"	2023-02-22 12:44:50.291498372 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Closure_19/702/ChainableReverseAbstractInterpreter.java"	2023-02-22 12:44:50.291498372 +0900
@@ -154,29 +154,7 @@
    * {@code node}. It must be possible to refine the type of the given node in
    * the given scope, as determined by {@link #getTypeIfRefinable}.
    */
-  protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
-    switch (node.getType()) {
-      case Token.NAME:
-        scope.inferSlotType(node.getString(), type);
-        break;
-
-      case Token.GETPROP:
-        String qualifiedName = node.getQualifiedName();
-        Preconditions.checkNotNull(qualifiedName);
-
-        JSType origType = node.getJSType();
-        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
-        scope.inferQualifiedSlot(node, qualifiedName, origType, type);
-        break;
-
-        // "this" references aren't currently modeled in the CFG.
-
-      default:
-        throw new IllegalArgumentException("Node cannot be refined. \n" +
-            node.toStringTree());
-    }
-  }
-
+protected void declareNameInScope ( FlowScope scope , Node node , JSType type ) { switch ( node . getType ( ) ) { case Token . NAME : scope . inferSlotType ( node . getString ( ) , type ) ; break ; case Token . GETPROP : String qualifiedName = node . getQualifiedName ( ) ; Preconditions . checkNotNull ( qualifiedName ) ; JSType origType = node . getJSType ( ) ; origType = origType == null ? getNativeType ( UNKNOWN_TYPE ) : origType ; scope . inferQualifiedSlot ( node , qualifiedName , origType , type ) ; break ; case Token . DO : throw new IllegalArgumentException ( "Node cannot be refined. \n" + node . toStringTree ( ) ) ; } }
   /**
    * @see #getRestrictedWithoutUndefined(JSType)
    */
